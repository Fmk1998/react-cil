import React, {FunctionComponent, Fragment} from "react"import {RouteComponentProps, withRouter} from 'react-router-dom'import {connect, useDispatch} from 'react-redux'import List from "@material-ui/core/List"import ListItem from "@material-ui/core/ListItem"import ListItemIcon from "@material-ui/core/ListItemIcon"import ListItemText from "@material-ui/core/ListItemText"import "./index.scss"import Collapse from "@material-ui/core/Collapse"import ExpandLess from '@material-ui/icons/ExpandLess';import ExpandMore from '@material-ui/icons/ExpandMore';import StarBorder from '@material-ui/icons/StarBorder';import InboxIcon from '@material-ui/icons/MoveToInbox';import {makeStyles, Theme, createStyles} from '@material-ui/core/styles';import {RoutesMapping} from "../../../routes.config";import {CURRENT_MENU} from "../../../store/action-types";interface State {    menu?: {        sideList?: object    }}interface OwnProps extends RouteComponentProps {    sideList: []}type Props = OwnProps;const mapStateToProps = (state: State) => {    return {        sideList: state.menu?.sideList || []    }}const useStyles = makeStyles((theme: Theme) =>    createStyles({        root: {            width: '100%',            maxWidth: 360,            backgroundColor: theme.palette.background.paper,        },        nested: {            paddingLeft: theme.spacing(4),        },    }),);const SlideBar: FunctionComponent<Props> = (props) => {    const classes = useStyles();    const dispatch = useDispatch();    const [open, setOpen] = React.useState('');    const handleClick = (value: any) => () => {        if (open !== value[RoutesMapping.key]) {            setOpen(value[RoutesMapping.key])        } else {            setOpen('')        }    };    const itemClick = (item: any) => () => {        dispatch({            type: CURRENT_MENU,            url: item[RoutesMapping.url]        })    }    return (        <List className="slide">            {props.sideList.map((value: any, index) => (                value.children                    ? <Fragment key={index}>                        <ListItem button onClick={handleClick(value)}>                            <ListItemIcon><InboxIcon/></ListItemIcon>                            <ListItemText primary={value[RoutesMapping.name]}/>                            {open === value[RoutesMapping.key] ? <ExpandLess/> : <ExpandMore/>}                        </ListItem>                        <Collapse in={open === value[RoutesMapping.key]} timeout="auto" unmountOnExit>                            <List component="div" disablePadding>                                {value.children.map((item: any) => (                                    <ListItem key={item[RoutesMapping.key]} button className={classes.nested}                                              onClick={itemClick(item)}                                    >                                        <ListItemIcon>                                            <StarBorder/>                                        </ListItemIcon>                                        <ListItemText primary={item[RoutesMapping.name]}/>                                    </ListItem>                                ))}                            </List>                        </Collapse>                    </Fragment>                    : <div>没有子菜单</div>            ))}        </List>    )}export default withRouter(connect(mapStateToProps, null)(SlideBar));